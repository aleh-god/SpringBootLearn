package org.GODevelopment.SimpleWebApp.Controllers;

import org.GODevelopment.SimpleWebApp.EntityModel.Message;
import org.GODevelopment.SimpleWebApp.EntityModel.User;
import org.GODevelopment.SimpleWebApp.Repository.MessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.naming.Binding;
import javax.validation.Valid;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Controller // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepo messageRepo;

    @Value("${upload.path}") // Анотация ищет значение в пропертис и инжектит значение
    private String uploadPath; // Место хранения файлов

    @GetMapping("/")
    public String getGreeting(
            Model model) {
        return "greeting";
    }

    @GetMapping("/main")
    public String getMain(
            @RequestParam(required = false, defaultValue = "") String filter,
            Model model) {
        Iterable<Message> messages = messageRepo.findAll();

        if (filter !=null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }

        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);
        return "main";
    }

    @PostMapping("/main") // <form method="post">
    public String addMessage(
            @AuthenticationPrincipal User user,
            @Valid Message message,
            BindingResult bindingResult,
            Model model,
            @RequestParam("file") MultipartFile file) throws IOException {
        message.setAuthor(user);

        if (bindingResult.hasErrors()) {
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);
            model.mergeAttributes(errorsMap);
            model.addAttribute("message", message);

        } else {

            if (file != null && !file.getOriginalFilename().isEmpty()) { // Проверяем наличие аттач в реквесте
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) { // проверяем наличие папки назначения, если ее нет, то создаем
                    uploadDir.mkdir();
                }

                //  universally unique identifier - для исключения коллизий хранения
                String uuidFile = UUID.randomUUID().toString(); // Static factory to retrieve a type 4 (cryptographically strong) UUID.

                String resultFileName = uuidFile + "." + file.getOriginalFilename(); // Return the original filename in the client's filesystem.
                file.transferTo(new File(uploadPath + "/" + resultFileName)); // Transfer the received file to the given destination file.

                message.setFilename(resultFileName);
            }

            model.addAttribute("message", null);

            messageRepo.save(message);
        }

        Iterable<Message> allMessages = messageRepo.findAll();
        model.addAttribute("messages", allMessages);

        return "main";
    }

}
